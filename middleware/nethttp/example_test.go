package wasm

import (
	"context"
	_ "embed"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/http/httptest"

	httpwasm "github.com/http-wasm/http-wasm-host-go"
)

// exampleWasm was generated by the following:
//
//	cd testdata; wat2wasm --debug-names example.wat
//
//go:embed testdata/example.wasm
var exampleWasm []byte

func Example() {
	ctx := context.Background()
	logger := httpwasm.Logger(func(msg string) { fmt.Println(msg) })

	// Configure and compile the WebAssembly guest binary. In this case, it is
	// a logging interceptor.
	mw, err := NewMiddleware(ctx, exampleWasm, Logger(logger))
	if err != nil {
		log.Panicln(err)
	}
	defer mw.Close(ctx)

	// Create the real request handler.
	next := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		w.Write([]byte("{\"hello\": \"world\"}")) // nolint
	})

	// Wrap this with an interceptor implemented in WebAssembly.
	wrapped, err := mw.NewHandler(ctx, next)
	if err != nil {
		log.Panicln(err)
	}

	// Start the server with the wrapped handler.
	ts := httptest.NewServer(wrapped)
	defer ts.Close()

	// Make a client request and print the contents to the same logger
	resp, err := http.Get(ts.URL)
	if err != nil {
		log.Panicln(err)
	}
	defer resp.Body.Close()
	content, _ := io.ReadAll(resp.Body)
	logger(string(content))

	// Output:
	// before
	// after
	// {"hello": "world"}
}
